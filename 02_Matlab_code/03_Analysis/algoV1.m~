%  Seizure detection approach using the projection in the space
%  spanned by K optimal Slepians, where K is the Shannon number 
%
%  The normal/abnormal points are identified with the treshold malahanobis
%  calculated in the Slepian space (axes of the covariance matrix of the 
%  hyperellipsoide of the data) 
% -------------------------------------------------------------------------
%
%  Version: V1 2018 06 16
%  Author: VYBORNOVA Anna 
% 
% ------------------------- BEGIN CODE ------------------------------------


clc 
clear all
close all

dbstop if error;
set(0,'defaultfigurecolor',[1 1 1]);
set(0,'defaulttextinterpreter','none');

% set the parameters
Params = setParams(); 

% adding the paths to the Slepian DEMO code and to the GFT package 
addpath("../SPLdemo");
addpath("../GFTpackage"); 

%% Load the example of the data
% load the chanlocs --> to execute this line eeglab need to be launched, as
% readlocs is the eeglabfunction

FileNameChan257 = '/Users/annavybornova/EPFL/Master_4/GEM/GEM_part2/01_Data/EGI 257.Geneva Average 13.10-10.xyz'; 
chanlocs = readlocs(FileNameChan257);

% resting clean data + spike data (pre-processed)

PathResting = '/Users/annavybornova/EPFL/Master_4/GEM/GEM_part2/01_Data/20180424EEGresting/Clean'; 
PathSpike = '/Users/annavybornova/EPFL/Master_4/GEM/GEM_part2/01_Data/20180424EEGspikes'; 

subjects = ["03", "07", "11", "14", "16"];
% information about the focus electrode (maximum spike amplitude) for
% Slepian

SpikeElectrode.label = ["1", "225", "T10", "181", "FT9", "220", "220"]; 
SpikeElectrode.indChanlocs = [225, 243, 252, 250, 10, 244, 244]; 
SpikeElectrode.indEGI = [1, 225, 210, 181, 67, 220, 220]; 

% selecting the subject 

subID = 1; 
Params.Slepian.CONST_SEIZURE_NODE = SpikeElectrode.indChanlocs(subID); 

load(strcat(PathResting,'/sub-', subjects(subID), '_rest_clean_preprocessed.mat')); 
load(strcat(PathSpike,'/sub-', subjects(subID), 'pre-processed.mat')); 

% load the datastructure
load('/Users/annavybornova/EPFL/Master_4/GEM/GEM_part2/01_Data/DataStructure.mat');

%% Compute the Slepian basis 

disp('... Adjacency Matrix generation');
Atemp = adj_generator([[chanlocs.X]', [chanlocs.Y]', [chanlocs.Z]'], Params.Gft.R);
nNeighbors = sum(Atemp);
avgNeighbors = mean(nNeighbors);
[SL0, Params.Slepian] = computeSlepians(Atemp, chanlocs, Params.Slepian); 

%% Obtain the matrix containing all the optimal Slepians 

% calculate the optimal Shannon number K
Params.Slepian.Shannon = round(Params.Slepian.CONST_W * Params.Slepian.CONST_SUBGRAPH_SIZE/...
    length(chanlocs));

% take the first K Slepians to construct an optimal Slepian basis
SLopt = SL0(:,1:Params.Slepian.Shannon); 

% project the resting state data on this optimal Slepian basis SLopt 
DataCleanSopt = SLopt'* data_clean;

% Calculate the Mahalanobis distance of each datapoint in the Slepian space

for iEpoch = 1:size(data_prep, 3)
    d2(:, iEpoch) = mahal((SLopt'*data_prep(:,:,iEpoch))', DataCleanSopt'); 
end

figure, 
plot(d2); 
title("Mahalanobis distance"); 
xlabel("Time points"); 
ylabel("Mahalanobis distance"); 

figure, 

for iEpoch = 1: size(data_prep,3)
    subplot(5,5,iEpoch); 
    plot(data_prep(SpikeElectrode.indChanlocs(subID), :, iEpoch), 'k')
    hold on; 
    plot(d2(:, iEpoch), 'm'); 
    
    if iEpoch == size(data_prep,3)
        legend("max ampl", "Mahal Dist");
    end
    xlabel("timepoints"); 
    ylim([min(min(min(data_prep))), max(max(d2))]); 
end

% do same but with the PCs 
[PCs, ~, ~ ] = svd(data_clean, 'econ');
for iEpoch = 1:size(data_prep, 3)
    d2_pc(:, iEpoch) = mahal((PCs(:, 1:Params.Slepian.Shannon)'*data_prep(:,:,iEpoch))', DataCleanSopt'); 
end



    











